{"version":3,"sources":["components/title.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Form","props","onSubmit","getWeather","lib","onChange","label","floatingLabel","name","style","width","color","margin","raised","ripple","primary","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","noSpacing","col","tablet","title_Title","form_Form","this","weather_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbfe44e0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Title = () => {\r\n  return (\r\n    <div className=\"title-body\">\r\n      <h1>Weather App</h1>\r\n      <h5>Find out the status of the weather in different countries </h5>\r\n    </div>\r\n  );\r\n};\r\nexport default Title;\r\n","import React from \"react\";\r\nimport { Textfield, Button } from \"react-mdl\";\r\nexport const Form = props => {\r\n  return (\r\n    <div className=\"form-body\">\r\n      <form onSubmit={props.getWeather}>\r\n        <Textfield\r\n          onChange={() => {}}\r\n          label=\"City\"\r\n          floatingLabel\r\n          name=\"city\"\r\n          style={{\r\n            width: \"200px\",\r\n            color: \"black\",\r\n            margin: \"10px\"\r\n          }}\r\n        />\r\n        <Textfield\r\n          onChange={() => {}}\r\n          label=\"Country\"\r\n          floatingLabel\r\n          name=\"country\"\r\n          style={{\r\n            width: \"200px\",\r\n            color: \"black\",\r\n            margin: \"10px\"\r\n          }}\r\n        />\r\n        <Button raised ripple primary className=\"button-form\">\r\n          Button\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nexport const Weather = props => {\r\n  return (\r\n    <div className=\"weather-body\">\r\n      {props.city && props.country && (\r\n        <div>\r\n          <p>\r\n            Location:\r\n            <span className=\"weather-body-span\">\r\n              {\" \"}\r\n              {props.city}, {props.country}\r\n            </span>\r\n          </p>\r\n          <hr />\r\n        </div>\r\n      )}\r\n      {props.temperature && (\r\n        <div>\r\n          <p>\r\n            Temperature:{\" \"}\r\n            <span className=\"weather-body-span\">{props.temperature} C</span>\r\n          </p>\r\n          <hr />\r\n        </div>\r\n      )}\r\n      {props.humidity && (\r\n        <div>\r\n          <p>\r\n            Humidity:{\" \"}\r\n            <span className=\"weather-body-span\">{props.humidity}</span>\r\n          </p>\r\n          <hr />\r\n        </div>\r\n      )}\r\n      {props.description && (\r\n        <div>\r\n          <p>\r\n            Condition:{\" \"}\r\n            <span className=\"weather-body-span\">{props.description}</span>\r\n          </p>\r\n        </div>\r\n      )}\r\n      {props.error && (\r\n        <div>\r\n          <p>\r\n            <span className=\"weather-body-span\">{props.error}</span>\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Title } from \"./components/title\";\nimport { Form } from \"./components/form\";\nimport { Weather } from \"./components/weather\";\nimport { Grid, Cell } from \"react-mdl\";\n\nconst API_KEY = \"288fd7af46824d19f6871a8646d71e9e\";\n/*const Link = `http://api.openweathermap.org/data/2.5/weather?q=Manchester,uk&appid=288fd7af46824d19f6871a8646d71e9e&units=metric`; */\n\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n\n  getWeather = async e => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`\n    );\n    const data = await api_call.json();\n\n    if (city && country) {\n      console.log(data);\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter a value\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"app-body\">\n        <Grid noSpacing className=\"app-grid\">\n          <Cell col={5} tablet={6} className=\"app-title-cell\">\n            <Title />\n          </Cell>\n          <Cell col={7} tablet={6} className=\"app-weather-cell\">\n            <Form getWeather={this.getWeather} />\n            <Weather\n              temperature={this.state.temperature}\n              city={this.state.city}\n              country={this.state.country}\n              humidity={this.state.humidity}\n              description={this.state.description}\n              error={this.state.error}\n            />\n          </Cell>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"react-mdl/extra/material.css\";\nimport \"react-mdl/extra/material.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}